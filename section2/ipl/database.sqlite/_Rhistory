key =name_backbone(name='Buceros rhinoceros')$speciesKey
dat <- occ_search(taxonKey=key, return='data', limit=100)
dat <- occ_search(taxonKey=key, return='data', limit=1000)
dat
gbifmap(dat)
splist <- c('Anorrhinus galeritus', 'Anthracoceros albirostris',
'Anthracoceros malayanus','Buceros bicornis','Buceros rhinoceros',
'Rhinoplax vigil','Berenicornis comatus','Aceros corrugatus',
'Rhyticeros subruficollis','Rhyticeros undulatus')
keys <- vapply(splist, function(x) name_suggest(x)$key[1], numeric(1),
USE.NAMES=FALSE)
dat <- occ_data(keys, limit = 50)
library("data.table")
dd <- rbindlist(lapply(dat, function(z) z$data), fill = TRUE,
use.names = TRUE)
gbifmap(dd)
head(dd)
str(dd)
occ_count(taxonKey=2476004, georeferenced=TRUE)
head(name_lookup(query = 'Buceros rhinoceros', rank="species", return = 'data'))
my_code <- isocodes[grep("MY", isocodes$name), "code"]
occ_count(country=my_code)
my_code <- isocodes[grep("Malaysia", isocodes$name), "code"]
occ_count(country=my_code)
head(name_lookup(query='Bucerotiformes', rank="order", return="data"))
write.csv(dd,"F:\\SDM_in R\\hb1.csv")
occ_count(basisOfRecord='OBSERVATION')
library(rgbif)
occ_count(basisOfRecord='OBSERVATION')
occ_count(taxonKey=2476004, georeferenced=TRUE)
head(name_lookup(query='Bucerotiformes', rank="order", return="data"))
head(name_lookup(query = 'Buceros rhinoceros', rank="species", return = 'data'))
my_code <- isocodes[grep("Malaysia", isocodes$name), "code"]
occ_count(country=my_code)
dataset_suggest(query="Amazon", type="OCCURRENCE")
key =name_backbone(name='Buceros rhinoceros')$speciesKey
dat <- occ_search(taxonKey=key, return='data', limit=1000)
dat
gbifmap(dat) #removes nas and plots the geolocations
splist <- c('Anorrhinus galeritus', 'Anthracoceros albirostris',
'Anthracoceros malayanus','Buceros bicornis','Buceros rhinoceros',
'Rhinoplax vigil','Berenicornis comatus','Aceros corrugatus',
'Rhyticeros subruficollis','Rhyticeros undulatus')
keys <- vapply(splist, function(x) name_suggest(x)$key[1], numeric(1),
USE.NAMES=FALSE)
dat <- occ_data(keys, limit = 50)
library("data.table")
dd <- rbindlist(lapply(dat, function(z) z$data), fill = TRUE,
use.names = TRUE)
gbifmap(dd)
head(dd)
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install_tensorflow()
install_tensorflow()
install_tensorflow()
library(tensorflow)
install_tensorflow()
install.packages("tensorflow")
install.packages("forecast")
library(forecast)
install.packages("tibbletime")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("caret")
install.packages("e1071")
install.packages("frbs")
install.packages("sets")
install.packages("fugeR")
install.packages("fuzzyFDR")
install.packages("dplyr")
install.packages("spocc")
library(spocc)
results = occ(query = 'Rhinoplax vigil', from = 'gbif')
results
head(results$gbif)
results = occ(query = 'Rhinoplax vigil', from = c('ebird', 'gbif'))
results = occ(query = 'Rhinoplax vigil', from = c('ebird', 'gbif','ecoengine'))
summary(results)
results = occ(query = 'Rhinoplax vigil', from = 'gbif',gbifopts = list(georeferenced = TRUE)))
spp= c("Rhinoplax vigil", "Buceros rhinoceros", "Anthracoceros malayanus")
res_set = occ(spp, from = c('gbif', 'ecoengine'))
head(res_set)
dat = occ(query = spp, from = "gbif", gbifopts = list(georeferenced = TRUE))
head(dat)
data = occ2df(dat)
mapleaflet(data = data, dest = ".")
install.packages("leaflet")
library(leaflet)
mapleaflet(data = data, dest = ".")
head(data)
data = occ2df(res_set)
head(data)
tail(data)
spp <- c("Danaus plexippus", "Accipiter striatus", "Pinus contorta")
dat <- occ(query = spp, from = "gbif", gbifopts = list(georeferenced = TRUE))
data <- occ2df(dat)
mapleaflet(data = data, dest = ".")
spp= c("Rhinoplax vigil", "Buceros rhinoceros", "Anthracoceros malayanus")
dat <- occ(query = spp, from = 'gbif', gbifopts = list(hasCoordinate=TRUE))
dat <- occ(query = spp, from = c('gbif', 'ecoengine'), gbifopts = list(hasCoordinate=TRUE))
head(data)
dat = occ(query = spp, from ='gbif', gbifopts = list(hasCoordinate=TRUE))
data = occ2df(dat)#convert to data frame
head(data)
library(ggplot2)
mapggplot(dat)
plot(dat, cex = 1, pch = 10)
names(data)
install.packages("TSA")
library(TSA)
library(spocc)
results = occ(query = 'Rhinoplax vigil', from = 'gbif')
results
head(results$gbif)
results = occ(query = 'Rhinoplax vigil', from = c('ebird', 'gbif','ecoengine'))
summary(results)
spp= c("Rhinoplax vigil", "Buceros rhinoceros", "Anthracoceros malayanus")
res_set = occ(spp, from = c('gbif', 'ecoengine'))
head(res_set)
dat = occ(query = spp, from ='gbif', gbifopts = list(hasCoordinate=TRUE))
data = occ2df(dat)#convert to data frame
head(data)
tail(data)
install.packages("rWBclimate")
library(rWBclimate)
library(spocc)
library(taxize)
Soug<-gbif("Sorex", "ugyunak", geo=T, removeZeros=T, args=c('originisocountrycode=US', 'originisocountrycode=CA')) #retrieve all occurrences of Sorex ugyunak from the U.S. and Canada
library(rgbif)
Soug<-gbif("Sorex", "ugyunak", geo=T, removeZeros=T, args=c('originisocountrycode=US', 'originisocountrycode=CA')) #retrieve all occurrences of Sorex ugyunak from the U.S. and Canada
key =name_backbone(name='Buceros rhinoceros')$speciesKey
dat <- occ_search(taxonKey=key, return='data', limit=1000)
dat
coordinates(dat) = c("decimalLongitude", "decimalLatitude") #Set coordinates to a Spatial data frame
library(dismo)
library(maptools)
coordinates(dat) = c("decimalLongitude", "decimalLatitude") #Set coordinates to a Spatial data frame
data(wrld_simpl)
plot(wrld_simpl, axes=TRUE, col='light green', las=1) #plot points on a world map
points(dat, col='orange', pch=20, cex=0.75)
zoom(wrld_simpl, axes=TRUE, las=1, col='light green') #zoom to a specific region
library(spocc)
spp= c("Rhinoplax vigil", "Buceros rhinoceros", "Anthracoceros malayanus")
dat = occ(query = spp, from ='gbif', gbifopts = list(hasCoordinate=TRUE))
install.packages("mapr")
library(mapr)
map_leaflet(dat)
dat = fixnames(dat)
map_gist(dat, color = c("#976AAE","#6B944D","#BD5945"))
library(spocc)
spp= c("Rhinoplax vigil", "Buceros rhinoceros", "Anthracoceros malayanus")
dat = occ(query = spp, from ='gbif', gbifopts = list(hasCoordinate=TRUE))
library(mapr)
map_leaflet(dat) #leaflet based interactive map
library(ggplot2)
map_ggmap(dat)
install.packages("ggmap")
library(ggmap)
map_ggmap(dat)
map_ggplot(dat, "malaysia")
map_plot(dat, cex = 1, pch = 10)
dat
map_leaflet(dat) #leaflet based interactive map
map_ggmap(dat) ##ggmap version
install.packages("NicheMapR")
install.packages("rJava")
install.packages("enfa")
library(maptools)
data(wrld_simpl)
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
bradypus <- read.table(file, header=TRUE, sep=',')
plot(predictors, 1)
library(rJava)
install.packages("rJava")
library(rJava)
install.packages(c("NLP", "openNLP", "RWeka", "qdap"))
install.packages("openNLPmodels.en",
repos = "http://datacube.wu.ac.at/",
type = "source")
library(NLP)
library(openNLP)
library(RWeka)
install.packages("stringr", dependencies = TRUE)
setwd("F:\\SDM_in R\\Data\\1_Raster data\bioclim_land")
pa=read.csv("Pres_abs.csv")
setwd("F:\\SDM_in R\\Data\\1_Raster data\bioclim_land")
library(rvest)
url <- "https://en.wikipedia.org/wiki/2016_Summer_Olympics_medal_table"
medal_tally <- url %>% read_html() %>% html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]') %>% html_table(fill=TRUE)
medal_tally <- medal_tally[[1]]
head(medal_tally)
%>% html_table(fill=TRUE)
medal_tally <- url %>% read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]') %>% html_table(fill=TRUE)
medal_tally <- url %>% read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]') %>% html_table(fill=TRUE)
medal_tally <- medal_tally[[1]]
head(medal_tally)
medal_tally <- url %>% read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]') %>% html_table(fill=TRUE)
medal_tally <- medal_tally[[2]]
medal_tally <- medal_tally[[1]]
head(medal_tally)
url2="https://en.wikipedia.org/wiki/List_of_World_Heritage_Sites_in_the_United_Kingdom_and_the_British_Overseas_Territories"
whsuk <- url2 %>% read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]') %>% html_table(fill=TRUE)
whsuk <- whsuk[[1]]
head(whsuk)
url3="https://en.wikipedia.org/wiki/North_Korea_at_the_Olympics"
nko <- url %>% read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/div[4]/table/tbody/tr/td[1]/table') %>% html_table(fill=TRUE)
nko=nko[[1]]
nko <- nko[[1]]
medal_tally <- url %>% read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[2]') %>% html_table(fill=TRUE)
medal_tally <- medal_tally[[1]]
head(medal_tally)
whsuk <- url2 %>% read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[3]') %>% html_table(fill=TRUE)
whsuk <- whsuk[[1]]
head(whsuk)
library(RSQLite)
setwd("F:\\DataMining_R\\3_LectureData")
db <- dbConnect(dbDriver("SQLite"),"database.sqlite")
setwd("F:\\DataMining_R\\3_LectureData\\database.sqlite")
db <- dbConnect(dbDriver("SQLite"),"database.sqlite")
reviews <- dbGetQuery(db,"select * from Reviews limit 100")
head(reviews)
alltables = dbListTables(db)
head(alltables)
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
library(DBI)
db = RSQLite::datasetsDb()
dbListTables(db)
dbReadTable(db, "CO2")
dbGetQuery(db, "SELECT * FROM CO2 WHERE conc < 100")
dbDisconnect(db)
setwd("F:\\DataMining_R\\3_LectureData\\database.sqlite")
db = dbConnect(dbDriver("SQLite"),"database.sqlite")
alltables = dbListTables(db)
head(alltables)
setwd("F:\\DataMining_R\\3_LectureData\\ipl\\database.sqlite")
db = dbConnect(dbDriver("SQLite"),"database.sqlite")
alltables = dbListTables(db)
head(alltables)
dbReadTable(db, "Country")
dbReadTable(db, "Batsman_Scored")
head(dbReadTable(db, "Batsman_Scored"))
x=dbReadTable(db, "Batsman_Scored")
summary(x)
str(x)
dbDisconnect(db)
db = RSQLite::datasetsDb()
dbListTables(db) #all the tables in the database
dbReadTable(db, "CO2") #read in the CO2 table
dbGetQuery(db, "SELECT * FROM CO2 WHERE conc < 100")
dbDisconnect(db)
db = dbConnect(dbDriver("SQLite"),"database.sqlite")
alltables = dbListTables(db)
head(alltables)
setwd("F:\\DataMining_R\\3_LectureData\\database.sqlite")
db = dbConnect(dbDriver("SQLite"),"database.sqlite")
alltables = dbListTables(db)
head(alltables)
reviews <- dbGetQuery(db,"select * from Reviews limit 100")
head(reviews)
setwd("F:\\DataMining_R\\3_LectureData\\ipl\\database.sqlite")
db = dbConnect(dbDriver("SQLite"),"database.sqlite")
alltables = dbListTables(db)
head(alltables)
dbReadTable(db, "Country")
head(dbReadTable(db, "Batsman_Scored"))
x=dbReadTable(db, "Batsman_Scored") #read into variable x
summary(x)
str(x)
dbDisconnect(db)
library(rattle)
rattle()
rattle()
library(rvest)
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
webpage <- read_html(url)
rank_data_html <- html_nodes(webpage,'.text-primary')
rank_data <- html_text(rank_data_html)
class(rank_data)
rank_data<-as.numeric(rank_data)
class(rank_data)
title_data_html <- html_nodes(webpage,'.lister-item-header')
title_data <- html_text(title_data_html)
head(title_data)
title_data_html <- html_nodes(webpage,'.lister-item-header a')
head(title_data)
title_data <- html_text(title_data_html)
head(title_data)
library(cluster)
data("USArrests")
head("USArrests")
summary("USArrests")
head(iris)
head(USArrests)
install.packages("fanny")
install.packages("e1071")
library(e1071)
head(USArrests)
df = scale(USArrests)
cl<-cmeans(df,6,20,verbose=TRUE,method="cmeans")
print(cl)
head(cl)
data(butterfly)
install.packages("fclust")
require(fclust)
data(butterfly)
plot(butterfly,type='n')
text(butterfly[,1],butterfly[,2],labels=rownames(butterfly),cex=0.7,lwd=2)
round(FKM(butterfly)$U,2)
round(FKM.noise(butterfly,delta=3)$U,2)
data(iris)
x<-rbind(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length)
x<-t(x)
result<-cmeans(x,3,50,verbose=TRUE,method="cmeans")
print(result)
x<-rbind(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length)
x<-t(x)
result<-cmeans(x,3,50,verbose=TRUE,method="cmeans")
x<-rbind(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length)
x<-t(x)
x=scale(x)
result<-cmeans(x,3,50,verbose=TRUE,method="cmeans")
result<-cmeans(x,6,20,verbose=TRUE,method="cmeans")
df = scale(USArrests)
cl<-cmeans(df,6,20,verbose=TRUE,method="cmeans")
head(cl)
print(result)
s3d <- scatterplot3d(cl$membership, color=cl$cluster, type="h",
angle=55, scale.y=0.7, pch=16, main="Pertinence")
plot(iris, col=cl$cluster)
x<-rbind(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length)
head(x)
head(iris)
x=scale(iris)
x=scale(iris[1:4,])
x=scale(iris[,1:4])
result<-cmeans(x,6,20,verbose=TRUE,method="cmeans")
print(result)
head(USArrests)
df = scale(USArrests)
cl<-cmeans(df,6,20,verbose=TRUE,method="cmeans")
head(cl)
library(factoextra)
install.packages("factoextra")
library(factoextra)
fviz_cluster(cl, ellipse.type = "norm", repel = TRUE,
palette = "jco", ggtheme = theme_minimal(),
legend = "right")
df = scale(USArrests)
cl<-cmeans(df,6,20,verbose=TRUE,method="cmeans")
head(cl)
plot(cl)
fclustIndex(cl, df, index = "all")
bclust(df, centers=2, iter.base=10, minsize=0,
dist.method="euclidian",
hclust.method="average", base.method="kmeans",
base.centers=20, verbose=TRUE,
final.kmeans=FALSE, docmdscale=FALSE,
resample=TRUE, weights=NULL, maxcluster=base.centers, ...)
bclust(df, centers=2, iter.base=10, minsize=0,
dist.method="euclidian",
hclust.method="average", base.method="kmeans",
base.centers=20, verbose=TRUE,
final.kmeans=FALSE, docmdscale=FALSE,
resample=TRUE, weights=NULL, maxcluster=base.centers)
bclust(df, centers=2, iter.base=10, minsize=0,
dist.method="euclidian",
hclust.method="average", base.method="kmeans",
verbose=TRUE,
final.kmeans=FALSE, docmdscale=FALSE,
resample=TRUE, weights=NULL)
hclust.bclust(object, df, centers, dist.method=object$dist.method,
hclust.method=object$hclust.method, final.kmeans=FALSE,
docmdscale = FALSE, maxcluster=object$maxcluster)
library(flcust)
library(fclust)
data(butterfly)
head(butterfly)
round(FKM(butterfly)$U,2)
round(FKM(df)$U,2)
round(FKM(df)$U,4)
round(FKM.noise(df,delta=3)$U,2)
cl.memb (U)
U=matrix(runif(n*k,0,1), nrow=n, ncol=k)
n=20
k=3
U=matrix(runif(n*k,0,1), nrow=n, ncol=k)
U=U/apply(U,1,sum)
info.U=cl.memb.H(U)
rownames(info.U[info.U[,1]!=0,])
round(FKM(df)$U,2)
clust1=FKM(df)
clust1=FKM(df,k=4)
head(clust1)
plot(clust1,v1v2=c(1,5))
plot(clust1,v1v2=c(1,5),umin=0.5)
data(Mc)
names(Mc)
data(unemployment)
unempFKM=FKM(unemployment,k=3,stand=1)
unempFKM
summary(unempFKM)
plot(unempFKM,v1v2=c(1,5))
plot(unempFKM,v1v2=c(1,3))
plot(unempFKM,v1v2=c(1,3),umin=0.5)
head(unemployment)
g=FKM.gk(unemployment)
plot(g)
summary(g)
VAT(unemployment)
VIFCR (g, which)
data(iris)
x<-rbind(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length)
x<-t(x)
result<-cmeans(x,3,50,verbose=TRUE,method="cmeans")
print(result)
s3d <- scatterplot3d(result$membership, color=result$cluster, type="h",
angle=55, scale.y=0.7, pch=16, main="Pertinence")
plot(iris, col=result$cluster)
VIFCR (g, which) #see the clustering result
install.packages("cluster")
head(USArrests)
df = scale(USArrests)     # Standardize the data
res.fanny <- fanny(df, 3)  # Compute fuzzy clustering with k = 3
require(cluster)
res.fanny <- fanny(df, 3)  # Compute fuzzy clustering with k = 3
resf fanny(df, 3)  # Compute fuzzy clustering with k = 3
resf= fanny(df, 3)  # Compute fuzzy clustering with k = 3
head(resf$membership, 3) # Membership coefficients
head(resf$clustering) # Observation groups
fviz_cluster(resf, ellipse.type = "norm", repel = TRUE,
palette = "jco", ggtheme = theme_minimal(),
legend = "right")
library(factoextra)
fviz_cluster(resf, ellipse.type = "norm", repel = TRUE,
palette = "jco", ggtheme = theme_minimal(),
legend = "right")
fviz_silhouette(res.fanny, palette = "jco",
ggtheme = theme_minimal())
df2 = scale(unemployment)     # Standardize the data
resf2= fanny(df2, 3)  # Compute fuzzy clustering with k = 3
head(resf2$membership, 3) # Membership coefficients
head(resf2$clustering) # Observation groups
fviz_cluster(resf2, ellipse.type = "norm", repel = TRUE,
palette = "jco", ggtheme = theme_minimal(),
legend = "right")
fviz_silhouette(resf, palette = "jco",
ggtheme = theme_minimal())
fviz_silhouette(resf2, palette = "jco",
ggtheme = theme_minimal())
plot(fanny(ruspini, 5))
plot(fanny(USArrests, 5))
plot(fanny(unemployment, 5))
plot(fanny(USArrests, 6))
head(USArrests)
df = scale(USArrests)
cl<-cmeans(df,6,20,verbose=TRUE,method="cmeans")
require(e1071)
cl<-cmeans(df,6,20,verbose=TRUE,method="cmeans")
head(cl)
data(unemployment)
require(fclust)
data(unemployment)
head(unemployment)
unempFKM=FKM(unemployment,k=3,stand=1) #specify 3 fuzzy clusters
unempFKM
plot(unempFKM,v1v2=c(1,3))
plot(unempFKM,v1v2=c(1,3),umin=0.5)
g=FKM.gk(unemployment) #non-spherical clusters
summary(g)
VIFCR (g, which) #see the clustering result
head(USArrests)
df = scale(USArrests)     # Standardize the data
resf= fanny(df, 3)  # Compute fuzzy clustering with k = 3
head(resf$membership, 3) # Membership coefficients
head(resf$clustering) # Observation groups
fviz_cluster(resf, ellipse.type = "norm", repel = TRUE,
palette = "jco", ggtheme = theme_minimal(),
legend = "right")
fviz_silhouette(resf, palette = "jco",
ggtheme = theme_minimal())
df2 = scale(unemployment)     # Standardize the data
resf2= fanny(df2, 3)  # Compute fuzzy clustering with k = 3
head(resf2$membership, 3) # Membership coefficients
head(resf2$clustering) # Observation groups
fviz_cluster(resf2, ellipse.type = "norm", repel = TRUE,
palette = "jco", ggtheme = theme_minimal(),
legend = "right")
fviz_silhouette(resf2, palette = "jco",
ggtheme = theme_minimal())
plot(fanny(USArrests, 6))
df2 = scale(unemployment)     # Standardize the data
resf2= fanny(df2, 3)  # Compute fuzzy clustering with k = 3
head(resf2$membership, 3) # Membership coefficients
head(resf2$membership, 7) # Membership coefficients
head(resf2$clustering) # Observation groups
fviz_cluster(resf2, ellipse.type = "norm", repel = TRUE,
palette = "jco", ggtheme = theme_minimal(),
legend = "right")
fviz_silhouette(resf2, palette = "jco",
ggtheme = theme_minimal())
plot(fanny(USArrests, 6))
